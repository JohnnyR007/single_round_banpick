# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_library')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_library')
    _library = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_library', [dirname(__file__)])
        except ImportError:
            import _library
            return _library
        try:
            _mod = imp.load_module('_library', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _library = swig_import_helper()
    del swig_import_helper
else:
    import _library
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _library.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _library.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _library.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _library.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _library.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _library.SwigPyIterator_equal(self, x)

    def copy(self):
        return _library.SwigPyIterator_copy(self)

    def next(self):
        return _library.SwigPyIterator_next(self)

    def __next__(self):
        return _library.SwigPyIterator___next__(self)

    def previous(self):
        return _library.SwigPyIterator_previous(self)

    def advance(self, n):
        return _library.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _library.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _library.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _library.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _library.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _library.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _library.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _library.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.IntVector___nonzero__(self)

    def __bool__(self):
        return _library.IntVector___bool__(self)

    def __len__(self):
        return _library.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _library.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.IntVector___setitem__(self, *args)

    def pop(self):
        return _library.IntVector_pop(self)

    def append(self, x):
        return _library.IntVector_append(self, x)

    def empty(self):
        return _library.IntVector_empty(self)

    def size(self):
        return _library.IntVector_size(self)

    def swap(self, v):
        return _library.IntVector_swap(self, v)

    def begin(self):
        return _library.IntVector_begin(self)

    def end(self):
        return _library.IntVector_end(self)

    def rbegin(self):
        return _library.IntVector_rbegin(self)

    def rend(self):
        return _library.IntVector_rend(self)

    def clear(self):
        return _library.IntVector_clear(self)

    def get_allocator(self):
        return _library.IntVector_get_allocator(self)

    def pop_back(self):
        return _library.IntVector_pop_back(self)

    def erase(self, *args):
        return _library.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.IntVector_push_back(self, x)

    def front(self):
        return _library.IntVector_front(self)

    def back(self):
        return _library.IntVector_back(self)

    def assign(self, n, x):
        return _library.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _library.IntVector_resize(self, *args)

    def insert(self, *args):
        return _library.IntVector_insert(self, *args)

    def reserve(self, n):
        return _library.IntVector_reserve(self, n)

    def capacity(self):
        return _library.IntVector_capacity(self)
    __swig_destroy__ = _library.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _library.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _library.IntVectorVector___bool__(self)

    def __len__(self):
        return _library.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _library.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _library.IntVectorVector_pop(self)

    def append(self, x):
        return _library.IntVectorVector_append(self, x)

    def empty(self):
        return _library.IntVectorVector_empty(self)

    def size(self):
        return _library.IntVectorVector_size(self)

    def swap(self, v):
        return _library.IntVectorVector_swap(self, v)

    def begin(self):
        return _library.IntVectorVector_begin(self)

    def end(self):
        return _library.IntVectorVector_end(self)

    def rbegin(self):
        return _library.IntVectorVector_rbegin(self)

    def rend(self):
        return _library.IntVectorVector_rend(self)

    def clear(self):
        return _library.IntVectorVector_clear(self)

    def get_allocator(self):
        return _library.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _library.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _library.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_IntVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.IntVectorVector_push_back(self, x)

    def front(self):
        return _library.IntVectorVector_front(self)

    def back(self):
        return _library.IntVectorVector_back(self)

    def assign(self, n, x):
        return _library.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _library.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _library.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _library.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _library.IntVectorVector_capacity(self)
    __swig_destroy__ = _library.delete_IntVectorVector
    __del__ = lambda self: None
IntVectorVector_swigregister = _library.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class IntVectorVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.IntVectorVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.IntVectorVectorVector___nonzero__(self)

    def __bool__(self):
        return _library.IntVectorVectorVector___bool__(self)

    def __len__(self):
        return _library.IntVectorVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _library.IntVectorVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.IntVectorVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.IntVectorVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.IntVectorVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.IntVectorVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.IntVectorVectorVector___setitem__(self, *args)

    def pop(self):
        return _library.IntVectorVectorVector_pop(self)

    def append(self, x):
        return _library.IntVectorVectorVector_append(self, x)

    def empty(self):
        return _library.IntVectorVectorVector_empty(self)

    def size(self):
        return _library.IntVectorVectorVector_size(self)

    def swap(self, v):
        return _library.IntVectorVectorVector_swap(self, v)

    def begin(self):
        return _library.IntVectorVectorVector_begin(self)

    def end(self):
        return _library.IntVectorVectorVector_end(self)

    def rbegin(self):
        return _library.IntVectorVectorVector_rbegin(self)

    def rend(self):
        return _library.IntVectorVectorVector_rend(self)

    def clear(self):
        return _library.IntVectorVectorVector_clear(self)

    def get_allocator(self):
        return _library.IntVectorVectorVector_get_allocator(self)

    def pop_back(self):
        return _library.IntVectorVectorVector_pop_back(self)

    def erase(self, *args):
        return _library.IntVectorVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_IntVectorVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.IntVectorVectorVector_push_back(self, x)

    def front(self):
        return _library.IntVectorVectorVector_front(self)

    def back(self):
        return _library.IntVectorVectorVector_back(self)

    def assign(self, n, x):
        return _library.IntVectorVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _library.IntVectorVectorVector_resize(self, *args)

    def insert(self, *args):
        return _library.IntVectorVectorVector_insert(self, *args)

    def reserve(self, n):
        return _library.IntVectorVectorVector_reserve(self, n)

    def capacity(self):
        return _library.IntVectorVectorVector_capacity(self)
    __swig_destroy__ = _library.delete_IntVectorVectorVector
    __del__ = lambda self: None
IntVectorVectorVector_swigregister = _library.IntVectorVectorVector_swigregister
IntVectorVectorVector_swigregister(IntVectorVectorVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _library.DoubleVector___bool__(self)

    def __len__(self):
        return _library.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _library.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _library.DoubleVector_pop(self)

    def append(self, x):
        return _library.DoubleVector_append(self, x)

    def empty(self):
        return _library.DoubleVector_empty(self)

    def size(self):
        return _library.DoubleVector_size(self)

    def swap(self, v):
        return _library.DoubleVector_swap(self, v)

    def begin(self):
        return _library.DoubleVector_begin(self)

    def end(self):
        return _library.DoubleVector_end(self)

    def rbegin(self):
        return _library.DoubleVector_rbegin(self)

    def rend(self):
        return _library.DoubleVector_rend(self)

    def clear(self):
        return _library.DoubleVector_clear(self)

    def get_allocator(self):
        return _library.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _library.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _library.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.DoubleVector_push_back(self, x)

    def front(self):
        return _library.DoubleVector_front(self)

    def back(self):
        return _library.DoubleVector_back(self)

    def assign(self, n, x):
        return _library.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _library.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _library.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _library.DoubleVector_reserve(self, n)

    def capacity(self):
        return _library.DoubleVector_capacity(self)
    __swig_destroy__ = _library.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _library.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.DoubleVectorVector___nonzero__(self)

    def __bool__(self):
        return _library.DoubleVectorVector___bool__(self)

    def __len__(self):
        return _library.DoubleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _library.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.DoubleVectorVector___setitem__(self, *args)

    def pop(self):
        return _library.DoubleVectorVector_pop(self)

    def append(self, x):
        return _library.DoubleVectorVector_append(self, x)

    def empty(self):
        return _library.DoubleVectorVector_empty(self)

    def size(self):
        return _library.DoubleVectorVector_size(self)

    def swap(self, v):
        return _library.DoubleVectorVector_swap(self, v)

    def begin(self):
        return _library.DoubleVectorVector_begin(self)

    def end(self):
        return _library.DoubleVectorVector_end(self)

    def rbegin(self):
        return _library.DoubleVectorVector_rbegin(self)

    def rend(self):
        return _library.DoubleVectorVector_rend(self)

    def clear(self):
        return _library.DoubleVectorVector_clear(self)

    def get_allocator(self):
        return _library.DoubleVectorVector_get_allocator(self)

    def pop_back(self):
        return _library.DoubleVectorVector_pop_back(self)

    def erase(self, *args):
        return _library.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_DoubleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.DoubleVectorVector_push_back(self, x)

    def front(self):
        return _library.DoubleVectorVector_front(self)

    def back(self):
        return _library.DoubleVectorVector_back(self)

    def assign(self, n, x):
        return _library.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _library.DoubleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _library.DoubleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _library.DoubleVectorVector_reserve(self, n)

    def capacity(self):
        return _library.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _library.delete_DoubleVectorVector
    __del__ = lambda self: None
DoubleVectorVector_swigregister = _library.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

class Int2StrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2StrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2StrMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.Int2StrMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.Int2StrMap___nonzero__(self)

    def __bool__(self):
        return _library.Int2StrMap___bool__(self)

    def __len__(self):
        return _library.Int2StrMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _library.Int2StrMap___getitem__(self, key)

    def __delitem__(self, key):
        return _library.Int2StrMap___delitem__(self, key)

    def has_key(self, key):
        return _library.Int2StrMap_has_key(self, key)

    def keys(self):
        return _library.Int2StrMap_keys(self)

    def values(self):
        return _library.Int2StrMap_values(self)

    def items(self):
        return _library.Int2StrMap_items(self)

    def __contains__(self, key):
        return _library.Int2StrMap___contains__(self, key)

    def key_iterator(self):
        return _library.Int2StrMap_key_iterator(self)

    def value_iterator(self):
        return _library.Int2StrMap_value_iterator(self)

    def __setitem__(self, *args):
        return _library.Int2StrMap___setitem__(self, *args)

    def asdict(self):
        return _library.Int2StrMap_asdict(self)

    def __init__(self, *args):
        this = _library.new_Int2StrMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _library.Int2StrMap_empty(self)

    def size(self):
        return _library.Int2StrMap_size(self)

    def swap(self, v):
        return _library.Int2StrMap_swap(self, v)

    def begin(self):
        return _library.Int2StrMap_begin(self)

    def end(self):
        return _library.Int2StrMap_end(self)

    def rbegin(self):
        return _library.Int2StrMap_rbegin(self)

    def rend(self):
        return _library.Int2StrMap_rend(self)

    def clear(self):
        return _library.Int2StrMap_clear(self)

    def get_allocator(self):
        return _library.Int2StrMap_get_allocator(self)

    def count(self, x):
        return _library.Int2StrMap_count(self, x)

    def erase(self, *args):
        return _library.Int2StrMap_erase(self, *args)

    def find(self, x):
        return _library.Int2StrMap_find(self, x)

    def lower_bound(self, x):
        return _library.Int2StrMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _library.Int2StrMap_upper_bound(self, x)
    __swig_destroy__ = _library.delete_Int2StrMap
    __del__ = lambda self: None
Int2StrMap_swigregister = _library.Int2StrMap_swigregister
Int2StrMap_swigregister(Int2StrMap)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.FloatVector___nonzero__(self)

    def __bool__(self):
        return _library.FloatVector___bool__(self)

    def __len__(self):
        return _library.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _library.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.FloatVector___setitem__(self, *args)

    def pop(self):
        return _library.FloatVector_pop(self)

    def append(self, x):
        return _library.FloatVector_append(self, x)

    def empty(self):
        return _library.FloatVector_empty(self)

    def size(self):
        return _library.FloatVector_size(self)

    def swap(self, v):
        return _library.FloatVector_swap(self, v)

    def begin(self):
        return _library.FloatVector_begin(self)

    def end(self):
        return _library.FloatVector_end(self)

    def rbegin(self):
        return _library.FloatVector_rbegin(self)

    def rend(self):
        return _library.FloatVector_rend(self)

    def clear(self):
        return _library.FloatVector_clear(self)

    def get_allocator(self):
        return _library.FloatVector_get_allocator(self)

    def pop_back(self):
        return _library.FloatVector_pop_back(self)

    def erase(self, *args):
        return _library.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.FloatVector_push_back(self, x)

    def front(self):
        return _library.FloatVector_front(self)

    def back(self):
        return _library.FloatVector_back(self)

    def assign(self, n, x):
        return _library.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _library.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _library.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _library.FloatVector_reserve(self, n)

    def capacity(self):
        return _library.FloatVector_capacity(self)
    __swig_destroy__ = _library.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _library.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _library.FloatVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _library.FloatVectorVector___nonzero__(self)

    def __bool__(self):
        return _library.FloatVectorVector___bool__(self)

    def __len__(self):
        return _library.FloatVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _library.FloatVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _library.FloatVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _library.FloatVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _library.FloatVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _library.FloatVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _library.FloatVectorVector___setitem__(self, *args)

    def pop(self):
        return _library.FloatVectorVector_pop(self)

    def append(self, x):
        return _library.FloatVectorVector_append(self, x)

    def empty(self):
        return _library.FloatVectorVector_empty(self)

    def size(self):
        return _library.FloatVectorVector_size(self)

    def swap(self, v):
        return _library.FloatVectorVector_swap(self, v)

    def begin(self):
        return _library.FloatVectorVector_begin(self)

    def end(self):
        return _library.FloatVectorVector_end(self)

    def rbegin(self):
        return _library.FloatVectorVector_rbegin(self)

    def rend(self):
        return _library.FloatVectorVector_rend(self)

    def clear(self):
        return _library.FloatVectorVector_clear(self)

    def get_allocator(self):
        return _library.FloatVectorVector_get_allocator(self)

    def pop_back(self):
        return _library.FloatVectorVector_pop_back(self)

    def erase(self, *args):
        return _library.FloatVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _library.new_FloatVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _library.FloatVectorVector_push_back(self, x)

    def front(self):
        return _library.FloatVectorVector_front(self)

    def back(self):
        return _library.FloatVectorVector_back(self)

    def assign(self, n, x):
        return _library.FloatVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _library.FloatVectorVector_resize(self, *args)

    def insert(self, *args):
        return _library.FloatVectorVector_insert(self, *args)

    def reserve(self, n):
        return _library.FloatVectorVector_reserve(self, n)

    def capacity(self):
        return _library.FloatVectorVector_capacity(self)
    __swig_destroy__ = _library.delete_FloatVectorVector
    __del__ = lambda self: None
FloatVectorVector_swigregister = _library.FloatVectorVector_swigregister
FloatVectorVector_swigregister(FloatVectorVector)

class Gamecore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gamecore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gamecore, name)
    __repr__ = _swig_repr

    def __init__(self, max_rounds, max_hero_num, consider_pick_only, nn):
        this = _library.new_Gamecore(max_rounds, max_hero_num, consider_pick_only, nn)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_legal_moves(self, hero_job_map):
        return _library.Gamecore_get_legal_moves(self, hero_job_map)

    def execute_move(self, move):
        return _library.Gamecore_execute_move(self, move)

    def get_feature(self):
        return _library.Gamecore_get_feature(self)

    def get_game_status(self):
        return _library.Gamecore_get_game_status(self)

    def get_simulation_value(self, hero_job_map):
        return _library.Gamecore_get_simulation_value(self, hero_job_map)

    def print_game_info(self):
        return _library.Gamecore_print_game_info(self)

    def randsample(self, n, m, sample_idxs):
        return _library.Gamecore_randsample(self, n, m, sample_idxs)

    def get_hero_num(self):
        return _library.Gamecore_get_hero_num(self)

    def get_action_size(self):
        return _library.Gamecore_get_action_size(self)

    def get_last_move(self):
        return _library.Gamecore_get_last_move(self)

    def get_current_camp(self):
        return _library.Gamecore_get_current_camp(self)

    def get_current_round(self):
        return _library.Gamecore_get_current_round(self)

    def get_max_round(self):
        return _library.Gamecore_get_max_round(self)

    def get_current_step(self):
        return _library.Gamecore_get_current_step(self)

    def get_current_total_step(self):
        return _library.Gamecore_get_current_total_step(self)

    def get_past_winrates(self):
        return _library.Gamecore_get_past_winrates(self)
    __swig_destroy__ = _library.delete_Gamecore
    __del__ = lambda self: None
Gamecore_swigregister = _library.Gamecore_swigregister
Gamecore_swigregister(Gamecore)
cvar = _library.cvar
MAIN_CAMP_LIST = cvar.MAIN_CAMP_LIST
MAIN_ROUND_LIST = cvar.MAIN_ROUND_LIST
MAIN_PLAYER_LIST = cvar.MAIN_PLAYER_LIST
BAN_OR_PICK_LIST = cvar.BAN_OR_PICK_LIST
JOB_LIST = cvar.JOB_LIST
MAX_HERO_JOB_NUM_MAP = cvar.MAX_HERO_JOB_NUM_MAP
ROUND_STEPS = cvar.ROUND_STEPS
PICK_SIZE = cvar.PICK_SIZE
BAN_SIZE = cvar.BAN_SIZE

class TreeNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _library.new_TreeNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def select(self, c_puct, c_virtual_loss):
        return _library.TreeNode_select(self, c_puct, c_virtual_loss)

    def select_random(self, c_puct, c_virtual_loss):
        return _library.TreeNode_select_random(self, c_puct, c_virtual_loss)

    def expand(self, action_priors):
        return _library.TreeNode_expand(self, action_priors)

    def backup(self, value):
        return _library.TreeNode_backup(self, value)

    def update_winrate(self, winrate):
        return _library.TreeNode_update_winrate(self, winrate)

    def get_value(self, c_puct, c_virtual_loss, sum_n_visited):
        return _library.TreeNode_get_value(self, c_puct, c_virtual_loss, sum_n_visited)

    def get_is_leaf(self):
        return _library.TreeNode_get_is_leaf(self)

    def get_current_round(self):
        return _library.TreeNode_get_current_round(self)

    def get_current_step(self):
        return _library.TreeNode_get_current_step(self)
    __swig_setmethods__["max_round"] = _library.TreeNode_max_round_set
    __swig_getmethods__["max_round"] = _library.TreeNode_max_round_get
    if _newclass:
        max_round = _swig_property(_library.TreeNode_max_round_get, _library.TreeNode_max_round_set)
    __swig_setmethods__["step_num_one_round"] = _library.TreeNode_step_num_one_round_set
    __swig_getmethods__["step_num_one_round"] = _library.TreeNode_step_num_one_round_get
    if _newclass:
        step_num_one_round = _swig_property(_library.TreeNode_step_num_one_round_get, _library.TreeNode_step_num_one_round_set)
    __swig_destroy__ = _library.delete_TreeNode
    __del__ = lambda self: None
TreeNode_swigregister = _library.TreeNode_swigregister
TreeNode_swigregister(TreeNode)

class MCTS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCTS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCTS, name)
    __repr__ = _swig_repr

    def __init__(self, neural_network, thread_num, c_puct, num_mcts_sims, c_virtual_loss, action_size, max_round, current_round, current_step, step_num_one_round, hero_job_map):
        this = _library.new_MCTS(neural_network, thread_num, c_puct, num_mcts_sims, c_virtual_loss, action_size, max_round, current_round, current_step, step_num_one_round, hero_job_map)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_action_probs(self, gamecore, temp=1e-3):
        return _library.MCTS_get_action_probs(self, gamecore, temp)

    def update_with_move(self, last_move):
        return _library.MCTS_update_with_move(self, last_move)
    __swig_destroy__ = _library.delete_MCTS
    __del__ = lambda self: None
MCTS_swigregister = _library.MCTS_swigregister
MCTS_swigregister(MCTS)

class TreeNodePure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodePure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodePure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _library.new_TreeNodePure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def select(self, c_puct, c_virtual_loss):
        return _library.TreeNodePure_select(self, c_puct, c_virtual_loss)

    def select_pure(self, c_puct, c_virtual_loss):
        return _library.TreeNodePure_select_pure(self, c_puct, c_virtual_loss)

    def expand(self, action_priors):
        return _library.TreeNodePure_expand(self, action_priors)

    def backup(self, value):
        return _library.TreeNodePure_backup(self, value)

    def update_winrate(self, winrate):
        return _library.TreeNodePure_update_winrate(self, winrate)

    def get_value(self, c_puct, c_virtual_loss, sum_n_visited):
        return _library.TreeNodePure_get_value(self, c_puct, c_virtual_loss, sum_n_visited)

    def get_is_leaf(self):
        return _library.TreeNodePure_get_is_leaf(self)

    def get_current_round(self):
        return _library.TreeNodePure_get_current_round(self)

    def get_current_step(self):
        return _library.TreeNodePure_get_current_step(self)
    __swig_setmethods__["max_round"] = _library.TreeNodePure_max_round_set
    __swig_getmethods__["max_round"] = _library.TreeNodePure_max_round_get
    if _newclass:
        max_round = _swig_property(_library.TreeNodePure_max_round_get, _library.TreeNodePure_max_round_set)
    __swig_setmethods__["step_num_one_round"] = _library.TreeNodePure_step_num_one_round_set
    __swig_getmethods__["step_num_one_round"] = _library.TreeNodePure_step_num_one_round_get
    if _newclass:
        step_num_one_round = _swig_property(_library.TreeNodePure_step_num_one_round_get, _library.TreeNodePure_step_num_one_round_set)
    __swig_destroy__ = _library.delete_TreeNodePure
    __del__ = lambda self: None
TreeNodePure_swigregister = _library.TreeNodePure_swigregister
TreeNodePure_swigregister(TreeNodePure)

class MCTS_PURE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCTS_PURE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCTS_PURE, name)
    __repr__ = _swig_repr

    def __init__(self, thread_num, c_puct, num_mcts_sims, c_virtual_loss, action_size, max_round, current_round, current_step, step_num_one_round, hero_job_map):
        this = _library.new_MCTS_PURE(thread_num, c_puct, num_mcts_sims, c_virtual_loss, action_size, max_round, current_round, current_step, step_num_one_round, hero_job_map)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_action_probs(self, gamecore, temp=1e-3):
        return _library.MCTS_PURE_get_action_probs(self, gamecore, temp)

    def update_with_move(self, last_move):
        return _library.MCTS_PURE_update_with_move(self, last_move)
    __swig_destroy__ = _library.delete_MCTS_PURE
    __del__ = lambda self: None
MCTS_PURE_swigregister = _library.MCTS_PURE_swigregister
MCTS_PURE_swigregister(MCTS_PURE)

class predict_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, predict_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, predict_model, name)
    __repr__ = _swig_repr

    def __init__(self, model_path, use_gpu, batch_size, gpu_selected):
        this = _library.new_predict_model(model_path, use_gpu, batch_size, gpu_selected)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _library.delete_predict_model
    __del__ = lambda self: None

    def set_batch_size(self, batch_size):
        return _library.predict_model_set_batch_size(self, batch_size)
predict_model_swigregister = _library.predict_model_swigregister
predict_model_swigregister(predict_model)

class single_lib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, single_lib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, single_lib, name)
    __repr__ = _swig_repr

    def __init__(self, model_path, batch_size, gpu_selected):
        this = _library.new_single_lib(model_path, batch_size, gpu_selected)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _library.delete_single_lib
    __del__ = lambda self: None

    def set_batch_size(self, batch_size):
        return _library.single_lib_set_batch_size(self, batch_size)
single_lib_swigregister = _library.single_lib_swigregister
single_lib_swigregister(single_lib)

# This file is compatible with both classic and new-style classes.


